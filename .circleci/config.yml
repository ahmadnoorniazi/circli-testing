# version: 2
# jobs:
#   build:
#     docker:
      
#       # specify the version you desire here
#       - image: circleci/node:8.9.0       
#       - image: circleci/mysql:5.7
#     environment:
#       MYSQL_ROOT_PASSWORD: 'root'
#       MYSQL_USER: 'root'
#       MYSQL_PASS: 'root'
#     volumes:
#       - ./mounts/mysql:/var/lib/mysql
#       - ./mounts/scripts:/scripts
#     ports:
#       - "3307:3306"
#     depends_on:
#       - circleci/node
      
#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/mongo:3.4.4

#     working_directory: ~/repo

#     steps:
#       - checkout
#       # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #     - v1-dependencies-{{ checksum "package.json" }}
      #     # fallback to using the latest cache if no exact match is found
      #     - v1-dependencies-

      # - run: yarn install
      

      # - save_cache:
      #     paths:
      #       - node_modules
      #       - ../server:/node/server
      #        - mounts/scripts/createUser.sh:/node/createUser.sh:ro
      #     key: v1-dependencies-{{ checksum "package.json" }}
        
      # # run tests!
      # - run: yarn test
      

###################

# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
# version: 2
# jobs:
#   build:
#     docker:  
#       # specify the version you desire here
#       - image: circleci/node:8.9.0

#       - image: circleci/mysql:5.7
#         environment:
#           MYSQL_ROOT_PASSWORD: root
#           MYSQL_DATABASE: test
#           MYSQL_USER: root
#           MYSQL_PASSWORD: root

#     steps:
#       # Checkout from GIT
#       - checkout

#       - run:
#           name: Waiting for MySQL to be ready
#           command: |
#             for i in `seq 1 30`;
#             do
#               nc -z 127.0.0.1 3306 && echo Success && exit 0
#               echo -n .
#               sleep 1
#             done
#             echo Failed waiting for MySQL && exit 1
#       # Import DB Dump
#       - run:
#           name: Install MySQL CLI
#           command: |
#             sudo apt-get install mysql-client
#             mysql -h 127.0.0.1 -u user -ppassw0rd test < sql-data/dummy.sql
#             mysql -h 127.0.0.1 -u user -ppassw0rd --execute="SELECT * FROM test.user"

    
# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       - image: circleci/node:8.9.0
      
#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/mongo:3.4.4

#     working_directory: ~/repo

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#           - v1-dependencies-{{ checksum "package.json" }}
#           # fallback to using the latest cache if no exact match is found
#           - v1-dependencies-

#       - run: yarn install

#       - save_cache:
#           paths:
#             - node_modules
#           key: v1-dependencies-{{ checksum "package.json" }}
        
#       # run tests!
#       - run: yarn test


# version: 2
# jobs:
#   build:
#     working_directory: "~/express_template"
#     docker:
#       - image: "circleci/node:8.9.0"
#       - image: "circleci/mysql:5.7"
#         ports:
#           - 3307:3306
#         environment:
#           MYSQL_ROOT_PASSWORD: root
#           MYSQL_DATABASE: test
#           MYSQL_USER: root
#           MYSQL_PASSWORD: root
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#           - v1-dependencies-{{ checksum "package.json" }}
#           # fallback to using the latest cache if no exact match is found
#           - v1-dependencies-

#       - run: yarn install
      

#       - save_cache:
#           paths:
#             - node_modules
#             - ../server:/node/server
#              - mounts/scripts/createUser.sh:/node/createUser.sh:ro
#           key: v1-dependencies-{{ checksum "package.json" }}
        
#       # run tests!
#       - run: 
#           name: apt update
#           command: sudo apt-get update   
#       # - run:
#       #     name: install mysql client
#       #     command: sudo apt-get install mysql-client
#       - run:
#           name: install dockerize
#           command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
#           environment:
#             DOCKERIZE_VERSION: v0.3.0
#       # # - run: yarn test
#       - run:
#           name: Wait for db
#           command: dockerize -wait tcp://$HOST:$PORT -timeout 1m
#           environment:
#             HOST: localhost
#             PORT: 3307
#       # - run: 
#       #     name: start sql
#       #     command: docker run --name db -e -d
#       - run:
#           name: create database
#           command: docker mysql -e 'CREATE DATABASE TEST' -uroot 

        


version: 2

refrences:

  cache-options: &cache-options
    key: package-cache-{{ checksum "package.json" }}

  images: &images
    docker:
      - image: circleci/node:8
      - image: circleci/mysql:5

jobs:
  build:
    <<: *images
    steps:
      - checkout
      - restore_cache:
          <<: *cache-options
      - run:
          name: yarn-install
          command: yarn install
      - save_cache:
          <<: *cache-options
          paths:
            - ./node_modules

  test:
    <<: *images
    steps:
      - checkout
      - restore_cache:
          <<: *cache-options
      # - run:
      #     name: linter
      #     command: ./node_modules/.bin/standard
      # - run:
      #     name: test-reporter-setup
      #     command: mkdir ./junit
      - run:
          name: install mysql client
          command: sudo apt-get install mysql-client
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.0
      - run:
          name: wait for mysql
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 1m
      - run:
          name: create database
          command: mysql -e 'CREATE DATABASE TEST' -u root --host 127.0.0.1
      - run: docker run --name db -d -p 3307:3306 mysql:5
      - run: yarn test
      # - run:
      #     name: test
      #     command: ./node_modules/.bin/mocha test --reporter mocha-junit-reporter
      #     environment:
      #       MOCHA_FILE: ./junit/mocha.xml
      #       NODE_ENV: test
      # - store_test_results:
      #     path: ./junit
      # - store_artifacts:
      #     path: ./junit

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build